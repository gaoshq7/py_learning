#### 类（外部函数调用） ####

# 当不使用任何函数注解时：
# 1. 实例对象无法调用无参函数，此类型函数只能被类直接调用，视为绝对的静态函数。
# 2. 实例对象调用有参函数时会自动绑定实例对象本身到第一个参数上，调用时从第二个参数开始传参。
# 3. 类调用有参函数时必须按参数列表的个数传参，没有自动绑定效果。

# 当使用‘@classmethod’注解时：
# 1. 函数必须至少有一个参数。
# 2. 类和实例对象都可以调用，且第一个参数默认绑定类本身。

# 当使用‘@staticmethod’注解时：
# 1. 函数视为普通静态函数，类和实例对象都可以按照参数列表进行传参，没有自动绑定效果。

class People():
    var1 = '香蕉你个巴拉'  # 此处是类静态属性

    def __init__(self, name):
        self.name = name  # 此处是实例对象属性

    def test1():
        print('我是存粹的静态函数，实例对象不能用')

    def test2(a):
        print(a)
        if hasattr(a, "name"):
            print(a.name)
        else:
            print('传的参数中没有“name”属性')

    @classmethod
    def test3(a):
        print(a, a.__name__)

    @staticmethod
    def test4(a):
        print(a)


p1 = People('陈冠希')

print('-------------test1---------------')
People.test1()
print('---------------------------------\n')

print('-------------test2---------------')
p1.test2()
People.test2("类得传个参数才能调用‘test2()’")
print('---------------------------------\n')

print('-------------test3---------------')
People.test3()
p1.test3()
print('---------------------------------\n')

print('-------------test4---------------')
People.test4("对于类：普通函数，都得传参")
p1.test4("对于实例对象：普通函数，都得传参")
print('---------------------------------')