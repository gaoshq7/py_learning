#### 函数（参数） ####

# !/usr/bin/env python3
# -*- coding: utf-8 -*-

# 1. 参数可以定义默认值，一旦使用默认值，该变量不会随函数的结束而出栈；
#    形参如果有默认值则必须排在没有默认值的其它形参后面（不定长参数、字典参数除外），否则会造成语法歧义。
print("-------------------- 参数默认值 --------------------")


def test_1(a: int, p=[]):
    p.append('x')
    return p


def test_2(a: int, p=None):
    if p is None:
        p = []
    p.append('x')
    return p


print(test_1(11), test_2(11), sep=' and ')
print(test_1(11), test_2(11), sep=' and ')
print(test_1(11), test_2(11), sep=' and ')
print("--------------------------------------------------")

# 2. 可以使用不定长参数（*p1）来接收数量不确定的参数列表。*p1的本质就是一个元组，在它后面的参数必须有默认值，否则会造成语法歧义；
#    不定长参数不能使用关键字来进行传参；
print("-------------------- 不定长参数 --------------------")


def test_3(p0, *p1, p2=1, p3=1):
    print(p1, p2, p3, sep='\n')


test_3('大蛤蟆', 1, 2, 3, p2=89, p3=78)
test_3('大蛤蟆', 1, 2, 3)
print("--------------------------------------------------")

# 3. 可以使用字典参数（**p4）来接收没有被定义过的关键字参数，字典参数必须放在参数列表最后；
#    调用任何函数时位置参数必须都在关键字参数前面，否则会造成语法歧义。
print("-------------------- 字典参数 --------------------")


def test_4(p0, *p1, p2, p3, **p4):
    print(p1)
    print(p4)


test_4("大西瓜", 1, 2, 3, a='哈', p2=90, b='呵', c='呦', p3=89, d='嘘')
print("-------------------------------------------------")

# 4. 使用‘*’参数（包括不定长参数和字典参数）或直接在参数列表里加入一个‘*’，可以实现调用函数时后面所有的参数全部都要使用关键字参数的效果。
print("-------------------- 强制关键字 --------------------")


def test_5(p0, p1, *, p2, p3):
    pass


test_5(1, 2, p2=3, p3=4)
print("--------------------------------------------------")